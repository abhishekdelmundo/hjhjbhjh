import hashlib
import time

def mine_block(previous_hash, difficulty):
    """
    Mines a block by finding a nonce that makes the hash of the block start with a certain number of zeros.
    
    :param previous_hash: The hash of the previous block.
    :param difficulty: The number of leading zeros required in the hash.
    :return: The nonce that solved the block and the resulting hash.
    """
    nonce = 0
    prefix = '0' * difficulty
    while True:
        text = f'{previous_hash}{nonce}'.encode()
        hash_result = hashlib.sha256(text).hexdigest()
        if hash_result.startswith(prefix):
            return nonce, hash_result
        nonce += 1

if __name__ == "__main__":
    previous_hash = '000000000000000000076c68d85f7e09f1f6c0f0f81e3eb8e8c32c7eebd4a058'
    difficulty = 4  # Number of leading zeros required
    print(f"Mining block with difficulty level: {difficulty}")
    
    start_time = time.time()
    nonce, hash_result = mine_block(previous_hash, difficulty)
    end_time = time.time()
    
    print(f"Mined a block with nonce: {nonce}")
    print(f"Hash result: {hash_result}")
    print(f"Time taken: {end_time - start_time} seconds")
